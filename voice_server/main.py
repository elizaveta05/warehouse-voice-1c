# server/main.py
from fastapi import FastAPI, UploadFile, File, HTTPException, Request, Response, BackgroundTasks  # FastAPI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞, UploadFile –∏ File –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤, HTTPException –¥–ª—è –æ—à–∏–±–æ–∫, Request –∏ Response –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, BackgroundTasks –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
from fastapi.middleware.cors import CORSMiddleware  # Middleware –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è CORS
from starlette.responses import JSONResponse  # –£–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å JSON
from collections import deque  # –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
import tempfile  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
import subprocess  # –î–ª—è –≤—ã–∑–æ–≤–∞ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (ffmpeg)
import shutil  # –î–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
import os  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –û–° (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
import json  # –î–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–µ–π –∫–æ–º–∞–Ω–¥ –≤ JSON
import pathlib  # –£–¥–æ–±–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏
import logging  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
import pythoncom  # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ COM –≤ –ø–æ—Ç–æ–∫–µ
from win32com.client import Dispatch  # –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å COM-–æ–±—ä–µ–∫—Ç–∞–º–∏ 1–°
from .config import settings  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—É—Ç–∏, CORS –∏ —Ç.–¥.)
from .hybrid_recognizer import transcribe_and_parse  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è --------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –ø–∏—à–µ—Ç –≤ —Ñ–∞–π–ª voice_server.log
logging.basicConfig(
    filename="voice_server.log",  # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
    level=logging.DEBUG,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG –∏ –≤—ã—à–µ)
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
)
# –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
logger = logging.getLogger("warehouse_voice_server")
# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤ —Ç–∞–∫–∂–µ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)  # –ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç –≤—Å—ë –æ—Ç DEBUG –∏ –≤—ã—à–µ
console_formatter = logging.Formatter(
    "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)
# -----------------------------------------------------------

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ CORS ---
app = FastAPI(title="Warehouse Voice Server")  # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
# –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
app.add_middleware(
    CORSMiddleware,
    allow_origins=[settings.cors_origins],  # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö origin
    allow_methods=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---
# –û—á–µ—Ä–µ–¥—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ 1–° –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
pending_commands = deque()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def save_tmp(upload: UploadFile) -> pathlib.Path:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ WAV 16 kHz –º–æ–Ω–æ —á–µ—Ä–µ–∑ ffmpeg, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ.
    :param upload: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    :return: –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É *.wav –∏–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ .bin –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    suffix = pathlib.Path(upload.filename or "audio").suffix or ".bin"
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    tmp_dir = pathlib.Path(tempfile.mkdtemp(prefix="voice_", dir=settings.tmp_dir))
    raw_path = tmp_dir / f"in{suffix}"  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.debug("save_tmp: writing raw upload to %s", raw_path)
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with raw_path.open("wb") as f:
        shutil.copyfileobj(upload.file, f)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ WAV
    if suffix.lower() != ".wav":
        wav_path = raw_path.with_suffix(".wav")
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        cmd = [
            "ffmpeg", "-y",  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞
            "-i", str(raw_path),  # –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            "-ar", "16000",  # —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 16 kHz
            "-ac", "1",  # –º–æ–Ω–æ –∫–∞–Ω–∞–ª
            "-c:a", "pcm_s16le",  # PCM 16-bit
            str(wav_path)
        ]
        logger.debug("save_tmp: converting via ffmpeg: %s", " ".join(cmd))
        # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg –∏ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        result = subprocess.run(cmd, capture_output=True)
        if result.returncode != 0:
            # –ï—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ª–æ–≥–∏—Ä—É–µ–º stderr –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
            logger.error("ffmpeg stderr: %s", result.stderr.decode(errors="ignore"))
            raise HTTPException(400, f"FFmpeg error: {result.stderr.decode()}")
        return wav_path

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ *.wav, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –ø—É—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    return raw_path


def send_to_1c(intent: str, fields: dict) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—è –≤ 1–° —á–µ—Ä–µ–∑ COM –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
    –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å pending_commands –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.
    :param intent: –∏–º—è –∏–Ω—Ç–µ–Ω—Ç–∞ (–¥–µ–π—Å—Ç–≤–∏—è)
    :param fields: —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–Ω—Ç–∞
    """
    # COM –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º –ø–æ—Ç–æ–∫–µ
    pythoncom.CoInitialize()
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ COMConnector 1–° –ø–æ –ø—É—Ç–∏ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑–µ
        connector = Dispatch("V83.COMConnector")
        ib_path = r'File="C:\Users\elozo\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç—ã\InfoBase7"'
        conn = connector.Connect(ib_path)

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ª–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã COM-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        available = [m for m in dir(conn) if not m.startswith("_")]
        logger.debug("–≠–∫—Å–ø–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤ conn: %s", available)

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –ø–æ–ª—è –≤ JSON (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        payload = json.dumps(fields or {}, ensure_ascii=False)
        logger.debug("–ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ 1–° —á–µ—Ä–µ–∑ COM: intent=%s, fields=%s", intent, payload)

        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ 1–° –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä
        conn.COMConnection.WriteTheCommandToTheRegister(intent, payload)
        logger.info("‚úî –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ —á–µ—Ä–µ–∑ COM")
    except Exception as e:
        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ª–æ–≥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤—Ç–æ—Ä
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ 1–° —á–µ—Ä–µ–∑ COM: %s ‚Äî –¥–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å", e)
        pending_commands.append({"intent": intent, "fields": fields or {}})
    finally:
        # –í—Å–µ–≥–¥–∞ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º COM
        pythoncom.CoUninitialize()

# --- HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã FastAPI ---
@app.get("/ping")
async def ping():
    """
    –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'ok'.
    """
    return JSONResponse({"status": "ok"})

@app.get("/intent")
async def get_intent():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞ 1–°.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ 204, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.
    """
    if pending_commands:
        cmd = pending_commands.popleft()  # –ó–∞–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        logger.info("/intent: delivering pending command %s", cmd)
        return JSONResponse(cmd)
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç, –æ—Ç–¥–∞–µ–º 204 No Content
    return Response(status_code=204)

@app.post("/recognize")
async def recognize(
    request: Request,
    background_tasks: BackgroundTasks,
    file: UploadFile = File(...)
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—É–¥–∏–æ-—Ñ–∞–π–ª, —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –≤ 1–° –≤ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É.
    """
    # IP –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    client = request.client.host
    logger.info("üü¢ /recognize from %s: filename=%s", client, file.filename)

    # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª
    try:
        path = save_tmp(file)
        logger.debug("Uploaded file saved to %s", path)
    except Exception as e:
        logger.exception("save_tmp failed")
        # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É 400, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        raise HTTPException(400, f"Cannot save file: {e}")

    # 2) –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
    try:
        result = transcribe_and_parse(path)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å text, engine, intent –∏ fields
        logger.info("transcribe_and_parse result: %s", result)
    except Exception as e:
        logger.exception("transcribe_and_parse failed")
        # –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è -> 500 Internal Server Error
        raise HTTPException(500, f"Recognition error: {e}")

    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–º–∞–Ω–¥—ã –≤ 1–° –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å –æ—Ç–≤–µ—Ç
    background_tasks.add_task(send_to_1c, result.get("intent"), result.get("fields", {}))

    # 4) –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç—É —Å—Ä–∞–∑—É
    return JSONResponse(result)
