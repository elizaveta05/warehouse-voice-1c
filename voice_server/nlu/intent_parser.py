import re
from typing import Dict

_PATTERNS = [
    # === справочники ===
    # Номенклатура
    (re.compile(r"покажи (?:(?:справочник )?номенклатура|список номенклатуры|список всех товаров|все позиции из номенклатуры|выведи номенклатуру)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?номенклатура) код (?P<code>\S+)", re.I), "OpenCatalogByCode"),
    (re.compile(r"открой (?:(?:справочник )?номенклатура)(?: наименование)? (?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой карточку номенклатуры(?: )?(?P<name>.+)?", re.I), "OpenCatalogByName"),

    # Организация
    (re.compile(r"покажи (?:(?:справочник )?организация|список организаций|выведи организации)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?организация)(?: наименование)? (?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой карточку организации (?P<name>.+)", re.I), "OpenCatalogByName"),

    # Сотрудники
    (re.compile(r"покажи (?:(?:справочник )?сотрудники|всех сотрудников|выведи сотрудников)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?сотрудник)(?: )?(?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой профиль сотрудника (?P<name>.+)", re.I), "OpenCatalogByName"),

    # Должность
    (re.compile(r"покажи (?:(?:справочник )?должность|список должностей|выведи должности)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?должность)(?: )?(?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой карточку должности (?P<name>.+)", re.I), "OpenCatalogByName"),

    # Контрагенты
    (re.compile(r"покажи (?:(?:справочник )?контрагенты|всех контрагентов|выведи контрагентов)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?контрагент)(?: )?(?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой справочник контрагент(?: наименование)? (?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой карточку контрагента (?P<name>.+)", re.I), "OpenCatalogByName"),

    # Адреса хранения
    (re.compile(r"покажи (?:(?:справочник )?адреса хранения|список адресов склада|выведи адреса склада)", re.I), "OpenCatalogList"),
    (re.compile(r"открой (?:(?:справочник )?адрес хранения)(?: )?(?P<name>.+)", re.I), "OpenCatalogByName"),
    (re.compile(r"открой карточку адреса хранения (?P<name>.+)", re.I), "OpenCatalogByName"),


    # === документы ===
    # Список любых документов
    (re.compile(
        r"покажи список (?P<doc>договоров контрагентов|приходных накладных|расходных накладных|перемещений товаров|актов приёма материалов|заказов поставщику|расположений товаров|инвентаризаций|перемещений товара|заказов покупателю|цен на продажу)",
        re.I
    ), "OpenDocumentList"),

    # Открыть по номеру
    (re.compile(
        r"открой (?:(?:документ )?(?P<doc>договор контрагентов|приходная накладная|расходная накладная|перемещение товаров|акт приёма материалов|заказ поставщику|расположение товаров|инвентаризация|перемещение товара|заказ покупателю|цена на продажу))(?: номер)? (?P<number>\d+)",
        re.I
    ), "OpenDocumentByNumber"),

    # Разговорные варианты без слова «документ»
    (re.compile(
        r"открой (?P<doc>договор|приходную накладную|расходную накладную|накладную прихода|накладную расхода|закупочную цену|перемещение товаров|перемещение товара|акт приёма|заказ поставщику|расположение товаров|инвентаризацию|заказ покупателю|цену на продажу) (?P<number>\d+)",
        re.I
    ), "OpenDocumentByNumber"),


    # === отчёты ===
    (re.compile(
        r"(?:запусти|покажи|открой|выведи) отч[её]т (?P<report>актуальн(?:ые|ая) цены номенклатур|остатки номенклатуры|хранение номенклатуры|результаты инвентаризации|по продажам)",
        re.I
    ), "RunReport"),


    # === регистры сведений ===
    (re.compile(
        r"(?:покажи|открой|выведи) регистр(?: сведений)? (?P<reg>список команд с сервера|закупочные цены|цена продажи|ценовые данные продаж)",
        re.I
    ), "OpenInfoRegister"),


    # === создание новых элементов ===
    (re.compile(r"(?:создай|добавь) справочник (?P<catalog>номенклатура|организация|сотрудники|должность|контрагенты|адреса хранения)", re.I), "CreateCatalog"),
    (re.compile(
        r"(?:создай|добавь) документ (?P<doc>договор контрагентов|приходная накладная|расходная накладная|закупочные цены|перемещение товаров|акт приёма материалов|заказ поставщику|расположение товаров|инвентаризация|перемещение товара|заказ покупателю|цена на продажу)",
        re.I
    ), "CreateDocument"),


    # === ваша существующая логика ===
    (re.compile(r"создай приходн(?:ую|ая) накладн", re.I), "CreateArrival"),
    (re.compile(r"создай расходн(?:ую|ая) накладн", re.I), "CreateShipment"),
    (re.compile(r"добав(?:ь|ить) товар (?P<item>.+?) количество (?P<qty>\d+)", re.I), "AddPosition"),
    (re.compile(r"проведи документ", re.I), "SaveDocument"),

    # === fallback ===
    (re.compile(r".+", re.I), "Unknown"),
]

def parse(text: str) -> Dict:
    for pattern, intent in _PATTERNS:
        m = pattern.search(text)
        if m:
            return {"intent": intent, "fields": m.groupdict()}
    return {"intent": "Unknown", "fields": {}}
