from __future__ import annotations

import re
from typing import Dict

from .metadata import MetadataMapper  

_PATTERNS = [
    # === справочники ===
    # Номенклатура
    (
        re.compile(
            r"^(?:покажи|выведи) (?:(?:справочник )?номенклатура|список номенклатуры|список всех товаров|"
            r"все позиции из номенклатуры)$",
            re.I,
        ),
        "OpenCatalogList",
    ),
    (re.compile(r"^открой (?:(?:справочник )?номенклатура) код (?P<code>\S+)$", re.I), "OpenCatalogByCode"),
    (re.compile(r"^открой (?:(?:справочник )?номенклатура)(?: наименование)? (?P<name>.+)$", re.I), "OpenCatalogByName"),
    (re.compile(r"^открой карточку (?:номенклатуры|товара) (?P<name>.+)$", re.I), "OpenCatalogByName"),

    # Организация
    (re.compile(r"^(?:покажи|выведи) (?:(?:справочник )?организация|список организаций)$", re.I), "OpenCatalogList"),
    (re.compile(r"^открой (?:(?:справочник )?организация)(?: наименование)? (?P<name>.+)$", re.I), "OpenCatalogByName"),
    (re.compile(r"^открой карточку организации (?P<name>.+)$", re.I), "OpenCatalogByName"),

    # Сотрудники
    (
        re.compile(
            r"^(?:покажи|выведи) (?:(?:справочник )?сотрудник(?:ы)?|список сотрудников)$",
            re.I,
        ),
        "OpenCatalogList",
    ),
    (re.compile(r"^открой (?:(?:справочник )?сотрудник)(?: профиль| )?(?P<name>.+)$", re.I), "OpenCatalogByName"),

    # Должность
    (re.compile(r"^(?:покажи|выведи) (?:(?:справочник )?должность|список должностей)$", re.I), "OpenCatalogList"),
    (re.compile(r"^открой (?:(?:справочник )?должность) (?P<name>.+)$", re.I), "OpenCatalogByName"),

    # Контрагенты
    (
        re.compile(
            r"^(?:покажи|выведи) (?:(?:справочник )?контрагент(?:ы)?|список контрагентов)$",
            re.I,
        ),
        "OpenCatalogList",
    ),
    (re.compile(r"^открой (?:(?:справочник )?контрагент)(?: наименование)? (?P<name>.+)$", re.I), "OpenCatalogByName"),

    # Адреса хранения
    (
        re.compile(
            r"^(?:покажи|выведи) (?:(?:справочник )?адрес(?:а)? хранения|список адресов склада)$",
            re.I,
        ),
        "OpenCatalogList",
    ),
    (re.compile(r"^открой (?:(?:справочник )?адрес(?:а)? хранения) (?P<name>.+)$", re.I), "OpenCatalogByName"),

    # === документы ===
    # 1) «список ...»
    (
        re.compile(
            r"^(?:покажи|выведи) список (?P<doc>договоров контрагентов|приходных накладных|расходных накладных|"
            r"перемещений товаров|актов приёма материалов|заказов поставщику|расположений товаров|"
            r"инвентаризаций|перемещений товара|заказов покупателю|цен на продажу)$",
            re.I,
        ),
        "OpenDocumentList",
    ),
    # 2) без «список»
    (
        re.compile(
            r"^(?:покажи|выведи) (?P<doc>договора контрагентов|приходные накладные|расходные накладные|"
            r"перемещения товаров|акты приёма материалов|заказы поставщику|расположения товаров|"
            r"инвентаризации|перемещения товара|заказы покупателей|цены на продажу)$",
            re.I,
        ),
        "OpenDocumentList",
    ),
    # открыть по номеру
    (
        re.compile(
            r"^(?:открой|выведи) (?:документ )?"
            r"(?P<doc>договор контрагентов|приходная накладная|расходная накладная|перемещение товаров|"
            r"акт приёма материалов|заказ поставщику|расположение товаров|инвентаризация|перемещение товара|"
            r"заказ покупателю|цена на продажу)(?: номер| по номеру)? (?P<number>\d+)$",
            re.I,
        ),
        "OpenDocumentByNumber",
    ),
    # разговорные варианты без слова «документ»
    (
        re.compile(
            r"^(?:открой|выведи) (?P<doc>договор|приходную накладную|накладную прихода|расходную накладную|"
            r"накладную расхода|перемещение товаров|перемещение товара|акт приёма|заказ поставщику|"
            r"расположение товаров|инвентаризацию|заказ покупателю|цену на продажу) (?P<number>\d+)$",
            re.I,
        ),
        "OpenDocumentByNumber",
    ),

    # === отчёты ===
    (
        re.compile(
            r"^(?:запусти|покажи|открой|выведи) отч[её]т (?P<report>актуальн(?:ые|ая) цены номенклатур|"
            r"остатки номенклатуры|хранение номенклатуры|результаты инвентаризации|по продажам)$",
            re.I,
        ),
        "RunReport",
    ),

    # === регистры сведений ===
    (
        re.compile(
            r"^(?:покажи|выведи|открой) (?:данные )?регистр(?: сведений)? (?P<reg>список команд с сервера|"
            r"закупочные цены|цена продажи|ценовые данные продаж)$",
            re.I,
        ),
        "OpenInfoRegister",
    ),

    # === создание новых справочников ===
    (
        re.compile(
            r"^(?:создай|добавь|добавить) (?:новую )?"
            r"(?P<catalog>номенклатура|организация|сотрудник|должность|контрагент|адрес хранения)$",
            re.I,
        ),
        "CreateCatalog",
    ),

    # === создание новых документов ===
    (
        re.compile(
            r"^(?:создай|добавь|открой форму (?:создания|новой)) (?:документ )?"
            r"(?P<doc>договор контрагентов|приходная накладная|расходная накладная|перемещение товаров|"
            r"акт приёма материалов|заказ поставщику|расположение товаров|инвентаризация|"
            r"перемещение товара|заказ покупателю|цена на продажу)$",
            re.I,
        ),
        "CreateDocument",
    ),
    (re.compile(r"^(?:создай|добавь) приходн(?:ую|ая) накладн(?:ицу)?$", re.I), "CreateArrival"),
    (re.compile(r"^(?:создай|добавь) расходн(?:ую|ая) накладн(?:ицу)?$", re.I), "CreateShipment"),

    # === добавление позиции ===
    (
        re.compile(
            r"^добав(?:ь|ить) товар (?P<item>.+?) количество (?P<qty>\d+)$",
            re.I,
        ),
        "AddPosition",
    ),

    # === проведение документа ===
    (re.compile(r"^(?:проведи|проведите) документ$", re.I), "SaveDocument"),

    # === fallback ===
    (re.compile(r".+", re.I), "Unknown"),
]

# ---------------------------------------------------------------------------
#                               БАЗОВЫЕ ФУНКЦИИ
# ---------------------------------------------------------------------------
def parse(text: str) -> Dict:
    """Исходный парсер без маппинга (оставлен для совместимости)."""
    text = text.strip().lower()
    for pattern, intent in _PATTERNS:
        m = pattern.match(text)
        if m:
            fields = {k: v for k, v in m.groupdict().items() if v}
            return {"intent": intent, "fields": fields}
    return {"intent": "Unknown", "fields": {}}


# ---------------------------------------------------------------------------
#                  «Обёртка» с нормализацией имён объектов 1С
# ---------------------------------------------------------------------------
_mapper = MetadataMapper()


def parse_and_enrich(text: str) -> Dict:
    """
    Парсит текст и приводит названия объектов к тем,
    что реально существуют в конфигурации 1С.
    """
    result = parse(text)
    result["fields"] = _mapper.enrich_fields(result["intent"], result["fields"])
    return result


__all__ = ["parse", "parse_and_enrich"]
