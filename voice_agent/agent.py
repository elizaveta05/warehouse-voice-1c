import sounddevice as sd
import queue
import threading
import requests
import time
import io
import wave

SAMPLERATE = 16000
CHANNELS   = 1
CHUNK_SEC  = 3
SERVER_URL = "http://192.168.0.129:8000"  # –∏–ª–∏ 192.168.0.129

audio_q = queue.Queue()

def audio_callback(indata, frames, time_info, status):
    if status:
        print("‚ö† Audio status:", status)
    audio_q.put(bytes(indata))

def record_chunk(duration=3) -> bytes:
    """–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –Ω–∞ duration —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç WAV –≤ bytes."""
    frames = bytearray()
    target_size = SAMPLERATE * CHANNELS * 2 * duration
    while len(frames) < target_size:
        frames.extend(audio_q.get())

    wav_io = io.BytesIO()
    with wave.open(wav_io, 'wb') as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(2)
        wf.setframerate(SAMPLERATE)
        wf.writeframes(frames)
    wav_io.seek(0)
    return wav_io.read()

def recognize_audio(audio_data: bytes) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –Ω–∞ /recognize –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç intent –∏–ª–∏ —Ç–µ–∫—Å—Ç"""
    try:
        files = {"file": ("audio.wav", audio_data, "audio/wav")}
        resp = requests.post(f"{SERVER_URL}/recognize", files=files, timeout=15)
        if resp.ok:
            result = resp.json()
            print("üß† –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", result)
            return result
        else:
            print("‚ùå –û—à–∏–±–∫–∞ /recognize:", resp.status_code)
    except Exception as e:
        print("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ /recognize:", e)
    return None

def main():
    print("üéô –ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Ñ—Ä–∞–∑—É '–Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'...")
    with sd.RawInputStream(samplerate=SAMPLERATE, blocksize=SAMPLERATE // 2, dtype='int16',
                           channels=CHANNELS, callback=audio_callback):

        while True:
            # üîÅ 1. –ñ–¥—ë–º –≥–æ—Ä—è—á—É—é —Ñ—Ä–∞–∑—É
            chunk = record_chunk(CHUNK_SEC)
            result = recognize_audio(chunk)
            if not result: continue

            text = result.get("fields", {}).get("text", "").lower()
            if "–Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" not in text:
                print("üîá –ù–µ –≥–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞:", text)
                continue

            print("üöÄ –ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∞ —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥")
            print("üëÇ –Ø –≤–∞—Å —Å–ª—É—à–∞—é")

            # üîÅ 2. –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            chunk = record_chunk(4)
            result = recognize_audio(chunk)
            if not result: continue

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ /command
            try:
                requests.post(f"{SERVER_URL}/command", json=result, timeout=10)
                print("üì§ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", result.get("intent"))
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ /command:", e)

            print("‚è≥ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã...")
            time.sleep(1)

if __name__ == "__main__":
    main()
