import json  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON: –∑–∞–≥—Ä—É–∑–∫–∞ config, –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
import logging  # –ú–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
import wave  # –î–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –∑–≤—É–∫–æ–≤—ã—Ö —Ñ—Ä–µ–π–º–æ–≤ –≤ WAV-—Ñ–∞–π–ª
import io  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ (BytesIO)
import requests  # HTTP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
import os  # –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import sys  # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —á–µ—Ä–µ–∑ sys.exit()
import pathlib  # –£–¥–æ–±–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º–∏ –ø—É—Ç—è–º–∏
import time  # –î–ª—è –ø–∞—É–∑ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏ (time.sleep)
import signal  # –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –û–° (SIGINT/SIGTERM)
import winsound  # –î–ª—è Windows-–∑–≤—É–∫–æ–≤ (Beep)
from contextlib import contextmanager  # –î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞

import sounddevice as sd  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤—É–∫–æ–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ (–º–∏–∫—Ä–æ—Ñ–æ–Ω)
from vosk import Model, KaldiRecognizer  # Vosk: –æ—Ñ—Ñ–ª–∞–π–Ω ASR-–º–æ–¥–µ–ª—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ config.json
BASE_DIR = pathlib.Path(__file__).resolve().parent  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
CONFIG = json.loads((BASE_DIR / "config.json").read_text(encoding="utf-8"))  # –ü–∞—Ä—Å–∏–º JSON

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª agent.log
logging.basicConfig(
    filename=BASE_DIR / "agent.log",
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
RATE              = CONFIG["SAMPLERATE"]         # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
CHANNELS          = CONFIG["CHANNELS"]           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ (–º–æ–Ω–æ/—Å—Ç–µ—Ä–µ–æ)
BITS              = CONFIG["BITS"]               # –ì–ª—É–±–∏–Ω–∞ —Å–µ–º–ø–ª–∞ (–≤ –±–∏—Ç–∞—Ö)
DEVICE_INDEX      = CONFIG["DEVICE_INDEX"]       # –ò–Ω–¥–µ–∫—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
TRIGGER_PHRASE    = CONFIG["TRIGGER_PHRASE"].lower()  # –ì–æ—Ä—è—á–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
SERVER_URL        = CONFIG["SERVER_URL"].rstrip("/")   # URL —Å–µ—Ä–≤–µ—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–ª—ç—à–∞
SILENCE_MS        = CONFIG["SILENCE_MS"]         # –í—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã (ms) –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
SILENCE_THRESHOLD = CONFIG["SILENCE_THRESHOLD"]  # –ü–æ—Ä–æ–≥ RMS –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏/—Ç–∏—à–∏–Ω—ã
MAX_RECORD_SEC    = CONFIG["MAX_RECORD_SEC"]     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (—Å–µ–∫—É–Ω–¥)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ Ctrl+C –∏–ª–∏ kill
def _on_shutdown(signum, frame):
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (%s), –≤—ã—Ö–æ–∂—É.", signum)
    sys.exit(0)

signal.signal(signal.SIGINT,  _on_shutdown)   # SIGINT (Ctrl+C)
signal.signal(signal.SIGTERM, _on_shutdown)   # SIGTERM (kill)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (RMS) –≤ –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º–µ
def rms(frame_bytes: bytes) -> int:
    import numpy as np
    a = np.frombuffer(frame_bytes, dtype=np.int16)       # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–π—Ç—ã –≤ –º–∞—Å—Å–∏–≤ int16
    return int((a.astype(np.int32) ** 2).mean() ** 0.5)  # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –∏–∑ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫–∞
@contextmanager
def open_audio_stream():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç RawInputStream –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ."""
    stream = sd.RawInputStream(
        samplerate=RATE,
        blocksize=RATE // 10,  # —á–∏—Ç–∞–µ–º –ø–æ 100 ms
        dtype='int16',
        channels=CHANNELS,
        device=DEVICE_INDEX
    )
    try:
        stream.start()  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        yield stream    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    finally:
        stream.stop()   # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫
        stream.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–µ—Ç–µ–∫—Ç ¬´–≥–æ—Ä—è—á–µ–π —Ñ—Ä–∞–∑—ã¬ª –∏ –∑–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã
def detect_hotword():
    """–°–ª—É—à–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω, –∏—â–µ–º –≥–æ—Ä—è—á—É—é —Ñ—Ä–∞–∑—É —á–µ—Ä–µ–∑ Vosk, –∑–∞–ø—É—Å–∫–∞–µ–º record_and_send."""
    model_path = os.environ.get("VOSK_MODEL", r"C:\vosk\vosk-model-small-ru-0.22")
    if not os.path.isdir(model_path):
        logging.error("Vosk model not found: %s", model_path)
        sys.exit(1)  # –±–µ–∑ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ

    model = Model(model_path)                     # –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Vosk
    rec   = KaldiRecognizer(model, RATE)          # —Å–æ–∑–¥–∞—ë–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å
    logging.info("Start listening for hotword‚Ä¶")

    with open_audio_stream() as stream:
        while True:
            raw_block, overflow = stream.read(RATE // 10)  # —á–∏—Ç–∞–µ–º 100 ms
            data = bytes(raw_block)
            # –ï—Å–ª–∏ Vosk –≤–µ—Ä–Ω—É–ª –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if rec.AcceptWaveform(data):
                text = json.loads(rec.Result()).get("text", "")
            else:
                text = json.loads(rec.PartialResult()).get("partial", "")

            logging.debug("Heard: %s", text)
            # –ï—Å–ª–∏ –≤ —É—Å–ª—ã—à–∞–Ω–Ω–æ–º –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞
            if TRIGGER_PHRASE in text.lower():
                speak_async("–°–ª—É—à–∞—é")  # –æ–∑–≤—É—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
                logging.info("Hotword detected")
                rec.Reset()            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
                time.sleep(0.3)        # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
                winsound.Beep(1000, 200)  # –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª Windows
                record_and_send(stream)   # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥—ã
                rec.Reset()            # —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
def record_and_send(stream):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±—É—Ñ–µ—Ä –¥–æ —Ç–∏—à–∏–Ω—ã –∏–ª–∏ MAX_RECORD_SEC, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º WAV –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    frames = []          # —Å–ø–∏—Å–æ–∫ –±–∞–π—Ç–æ–≤ –∞—É–¥–∏–æ—Ñ—Ä–µ–π–º–æ–≤
    silent_chunks = 0    # —Å—á—ë—Ç—á–∏–∫ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Ç–∏—Ö–∏—Ö —Ñ—Ä–µ–π–º–æ–≤
    chunk_ms       = 100 # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞ –≤ ms
    max_chunks     = int(MAX_RECORD_SEC * 1000 / chunk_ms)
    speech_started = False

    speak_async("–ü—Ä–∏–Ω—è—Ç–æ")  # –æ–∑–≤—É—á–∏–≤–∞–µ–º –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
    logging.info("üéôÔ∏è  –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã")

    for i in range(max_chunks):
        raw_block, overflow = stream.read(RATE // 10)
        chunk = bytes(raw_block)
        level = rms(chunk)  # –≤—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        logging.debug(f"chunk {i:03d}: rms={level}")

        if level >= SILENCE_THRESHOLD:
            if not speech_started:
                logging.info(f"üó£  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ—á—å –Ω–∞ —Ñ—Ä–µ–π–º–µ {i}")
            speech_started = True
            silent_chunks = 0
        else:
            if speech_started:
                silent_chunks += 1

        frames.append(chunk)

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏ –Ω–∞–∫–æ–ø–∏–ª–∞—Å—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è ¬´—Ç–∏—à–∏–Ω–∞¬ª
        if speech_started and silent_chunks * chunk_ms >= SILENCE_MS:
            logging.info(f"üîá –ó–∞—Ç–∏—à—å–µ {silent_chunks * chunk_ms} ms ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å")
            break

    duration_sec = len(frames) * chunk_ms / 1000
    logging.info(f"‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Ñ—Ä–µ–π–º–æ–≤={len(frames)}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å‚âà{duration_sec:.2f} s")

    # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ WAV —á–µ—Ä–µ–∑ BytesIO
    wav_bytes = io.BytesIO()
    with wave.open(wav_bytes, "wb") as wf:
        wf.setnchannels(CHANNELS)
        wf.setsampwidth(BITS // 8)
        wf.setframerate(RATE)
        wf.writeframes(b"".join(frames))
        wav_bytes.seek(0)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ

    files = {"file": ("command.wav", wav_bytes, "audio/wav")}
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ FastAPI /recognize
        resp = requests.post(f"{SERVER_URL}/recognize", files=files, timeout=30)
        resp.raise_for_status()
        logging.info("Server response: %s", resp.text)
        speak_async("–ì–æ—Ç–æ–≤–æ")  # –æ–∑–≤—É—á–∏–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    except Exception as e:
        logging.exception("Failed to send audio: %s", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
def speak_async(text):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç pyttsx3 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π."""
    def run():
        engine = pyttsx3.init()
        engine.say(text)
        engine.runAndWait()
    threading.Thread(target=run, daemon=True).start()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –≥–æ—Ä—è—á–µ–≥–æ —Å–ª–æ–≤–∞
if __name__ == "__main__":
    try:
        detect_hotword()
        speak_async("–ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

    except KeyboardInterrupt:
        logging.info("Agent stopped by user")
        sys.exit(0)
